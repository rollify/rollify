// Code generated by mockery v2.33.1. DO NOT EDIT.

package dicemock

import (
	context "context"

	dice "github.com/rollify/rollify/internal/dice"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateDiceRoll provides a mock function with given fields: ctx, r
func (_m *Service) CreateDiceRoll(ctx context.Context, r dice.CreateDiceRollRequest) (*dice.CreateDiceRollResponse, error) {
	ret := _m.Called(ctx, r)

	var r0 *dice.CreateDiceRollResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dice.CreateDiceRollRequest) (*dice.CreateDiceRollResponse, error)); ok {
		return rf(ctx, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dice.CreateDiceRollRequest) *dice.CreateDiceRollResponse); ok {
		r0 = rf(ctx, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dice.CreateDiceRollResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dice.CreateDiceRollRequest) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDiceRolls provides a mock function with given fields: ctx, r
func (_m *Service) ListDiceRolls(ctx context.Context, r dice.ListDiceRollsRequest) (*dice.ListDiceRollsResponse, error) {
	ret := _m.Called(ctx, r)

	var r0 *dice.ListDiceRollsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dice.ListDiceRollsRequest) (*dice.ListDiceRollsResponse, error)); ok {
		return rf(ctx, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dice.ListDiceRollsRequest) *dice.ListDiceRollsResponse); ok {
		r0 = rf(ctx, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dice.ListDiceRollsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dice.ListDiceRollsRequest) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDiceTypes provides a mock function with given fields: ctx
func (_m *Service) ListDiceTypes(ctx context.Context) (*dice.ListDiceTypesResponse, error) {
	ret := _m.Called(ctx)

	var r0 *dice.ListDiceTypesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*dice.ListDiceTypesResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *dice.ListDiceTypesResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dice.ListDiceTypesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeDiceRollCreated provides a mock function with given fields: ctx, r
func (_m *Service) SubscribeDiceRollCreated(ctx context.Context, r dice.SubscribeDiceRollCreatedRequest) (*dice.SubscribeDiceRollCreatedResponse, error) {
	ret := _m.Called(ctx, r)

	var r0 *dice.SubscribeDiceRollCreatedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dice.SubscribeDiceRollCreatedRequest) (*dice.SubscribeDiceRollCreatedResponse, error)); ok {
		return rf(ctx, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dice.SubscribeDiceRollCreatedRequest) *dice.SubscribeDiceRollCreatedResponse); ok {
		r0 = rf(ctx, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dice.SubscribeDiceRollCreatedResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dice.SubscribeDiceRollCreatedRequest) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

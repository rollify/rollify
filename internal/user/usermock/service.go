// Code generated by mockery v2.33.1. DO NOT EDIT.

package usermock

import (
	context "context"

	user "github.com/rollify/rollify/internal/user"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, r
func (_m *Service) CreateUser(ctx context.Context, r user.CreateUserRequest) (*user.CreateUserResponse, error) {
	ret := _m.Called(ctx, r)

	var r0 *user.CreateUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, user.CreateUserRequest) (*user.CreateUserResponse, error)); ok {
		return rf(ctx, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, user.CreateUserRequest) *user.CreateUserResponse); ok {
		r0 = rf(ctx, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.CreateUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, user.CreateUserRequest) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, r
func (_m *Service) GetUser(ctx context.Context, r user.GetUserRequest) (*user.GetUserResponse, error) {
	ret := _m.Called(ctx, r)

	var r0 *user.GetUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, user.GetUserRequest) (*user.GetUserResponse, error)); ok {
		return rf(ctx, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, user.GetUserRequest) *user.GetUserResponse); ok {
		r0 = rf(ctx, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.GetUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, user.GetUserRequest) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsers provides a mock function with given fields: ctx, r
func (_m *Service) ListUsers(ctx context.Context, r user.ListUsersRequest) (*user.ListUsersResponse, error) {
	ret := _m.Called(ctx, r)

	var r0 *user.ListUsersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, user.ListUsersRequest) (*user.ListUsersResponse, error)); ok {
		return rf(ctx, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, user.ListUsersRequest) *user.ListUsersResponse); ok {
		r0 = rf(ctx, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.ListUsersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, user.ListUsersRequest) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
